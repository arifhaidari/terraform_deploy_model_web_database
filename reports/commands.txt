# to configure the command line tools for aws
aws configure 
# then get the access key id and secret key of the IAM user 

#when you have main.tf and then run:
terraform init
# it will initialize the backend - and you do it in the directory where the code is stored 
# it will also create .terraform folder 


# the plan comamand 
terraform plan
#  creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure. By default, when Terraform creates a plan it: Reads the current state of any already-existing remote objects to make sure that the Terraform state is up-to-date.


# if all good then apply
terraform apply
# terminal output: Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
# executes planned actions, creating, updating, or deleting infrastructure resources to match the new state outlined in your IaC. Before making any real changes to the infrastructure, terraform apply provides an execution plan for reviewing the changes, ensuring transparency and control.

# to destroy  the instance in EC2
terraform destroy
# worth to mention while running that - need to be in the directory of main.tf or the script 

terraform state list  
terraform state rm aws_instance.start_instance


# Terraform commands
# First we initialize in the folder where we define the workspace main.tf file
terraform init
# then check if there is any workspace
terraform workspace list
#then create a new one 
terraform workspace new [workspace_name_new] # here workspace_name_new can be production
#then apply the changes and actions
terraform apply 
# then create another workspace 
terraform workspace new staging
# and then apply - you will provision another copy of your web app
terraform apply 
# and when destroying them then destroy in both 


# to test which file has changes to be formated
terraform fmt --check 
# to form the Code
terraform fmt 

# the command solve the problem
watch "curl ip_address:port"



