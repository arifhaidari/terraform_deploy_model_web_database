Project Side Notes and Reports

Provisioning Cloud Resources:
three ways:
GUI, API/CLI, and IaC

Terraform:
Terraform is an infrastructure-as-code software tool created by HashiCorp. Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language, or optionally JSON

infrastructure as a code:
Ad hoc scripts
Configuration management tools 
Server templating tools 
Orchestration tools 
Provisioning tools 

Common Patterns for using Terraform with other tools:
Provisioning (Terraform) + Config management:
such as Ansible - 

Terraform + Server templating or templating tools:
such as Packer template which is also HashiCorp tools:
packers used to build image from which those virtual machine are created. 
Packer's behavior is determined by the Packer template, which consists of a series of declarations and commands for Packer to follow. This template tells Packer what plugins (builders, provisioners, post-processors) to use, how to configure each of those plugins, and what order to run them in.

Terraform + Orchestration tool like Kubernetes:
define the cloud Resources


Terraform state file:
Terraform logs information about the resources it has created in a state file. This enables Terraform to know which resources are under its control and when to update and destroy them. The terraform state file, by default, is named terraform. tfstate and is held in the same directory where Terraform is run.

1. Provider
A provider is a plugin that Terraform uses to interact with various APIs for cloud services, SaaS platforms, or other technologies. Providers offer Terraform the ability to communicate with these services to create, read, update, and delete resources.

In Terraform, you declare providers in the configuration to specify:

Which service to use (e.g., AWS, Google Cloud, Azure).
Any necessary configurations, like authentication credentials, API endpoints, and regions.
Example of Provider: In the code you provided, the aws provider allows Terraform to manage resources on AWS.
code:
provider "aws" {
  region = var.aws_region
}
Here, the aws provider is configured with the region attribute, set to var.aws_region. This tells Terraform to use the AWS provider and specifies the region where the AWS resources should be created (e.g., us-east-1).
2. Resource
A resource is an instance of a service component provided by a provider, like an EC2 instance, an S3 bucket, or a DynamoDB table. Resources represent the actual pieces of infrastructure you want to create, manage, or destroy.

Example of Resources: In the code, several AWS resources are declared, such as an S3 bucket and a DynamoDB table. Here’s an example:

code:
resource "aws_s3_bucket" "terraform_state" {
  bucket        = var.s3_bucket_name
  force_destroy = true
}
This aws_s3_bucket resource represents an S3 bucket created on AWS.
The bucket parameter is set to var.s3_bucket_name, specifying the bucket's name.
The force_destroy parameter, set to true, allows Terraform to delete the bucket even if it’s not empty.
Similarly, this resource block creates a DynamoDB table:

code:
resource "aws_dynamodb_table" "terraform_locks" {
  name         = "terraform-state-locking"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"
  attribute {
    name = "LockID"
    type = "S"
  }
}
This table will be used to lock the state file, preventing simultaneous updates.

Summary
Provider: Configures Terraform to use a specific service (e.g., AWS) and defines settings to interact with it.
Resource: Defines an actual infrastructure component to be created on that provider (e.g., an S3 bucket or DynamoDB table on AWS).


In this Terraform code, terraform_state is the name given to a specific instance of the aws_s3_bucket resource. It is a user-defined identifier that Terraform uses to refer to this particular S3 bucket instance in the configuration.

Here’s a breakdown:

aws_s3_bucket
aws_s3_bucket is the resource type provided by the AWS provider.
It tells Terraform that this resource is an S3 bucket on AWS.
The resource type, in this case, includes all the attributes and configurations required to create and manage an S3 bucket.
terraform_state
terraform_state is the resource name, an identifier given to this specific instance of the aws_s3_bucket resource.
This name is unique within the configuration and allows you to reference this S3 bucket elsewhere in the code.
For example, if you wanted to enable versioning on this bucket, you can refer to it as aws_s3_bucket.terraform_state.
Example of Usage in Code:

code:
resource "aws_s3_bucket" "terraform_state" {
  bucket        = var.s3_bucket_name
  force_destroy = true
}

resource "aws_s3_bucket_versioning" "terraform_bucket_versioning" {
  bucket = aws_s3_bucket.terraform_state.id  # Referring to 'terraform_state' here
  versioning_configuration {
    status = "Enabled"
  }
}
Here:

aws_s3_bucket.terraform_state is used to refer to this specific instance of the S3 bucket, making it possible to enable versioning for terraform_state.
Key Difference:
aws_s3_bucket: Defines the type of resource (an S3 bucket on AWS).
terraform_state: Names this specific instance of the S3 bucket, making it accessible elsewhere in the code by the identifier terraform_state.


HCL (HashiCorp Configuration Language) is a configuration language designed for infrastructure automation. It has a syntax similar to JSON and supports booleans, integers, strings and more.



In Terraform, state management and state locking are crucial for tracking infrastructure changes, managing resources efficiently, and preventing conflicts, especially in collaborative environments.
State Management
Terraform maintains a state file (terraform.tfstate) to keep track of the resources it manages and their current state in the cloud provider. This file serves as a source of truth that Terraform references to understand the infrastructure’s current state and to calculate any necessary changes. For example:
    1. You define an AWS EC2 instance in your Terraform configuration.
    2. On the first terraform apply, Terraform creates the EC2 instance and records its details (like the instance ID) in the state file.
    3. If you later modify the configuration, like changing the instance type, Terraform compares the new configuration with the state file to identify and apply only the necessary changes.
Without this state file, Terraform would not be able to track changes and could re-create resources unnecessarily, leading to resource duplication, service disruption, or data loss.
State Locking
State locking prevents multiple users or processes from modifying the same Terraform state file simultaneously, which can cause conflicts or corrupt the state. Terraform achieves this through a state lock mechanism, which it enables when using a remote backend (e.g., AWS S3 for storage and DynamoDB for locking).
Example of State Locking:
Suppose two developers, Alice and Bob, are working on the same Terraform project using an S3 bucket for state storage and a DynamoDB table for state locking:
    1. Alice runs terraform apply to add a new security group. When Alice initiates the command, the DynamoDB lock prevents anyone else from updating the state.
    2. If Bob tries to run terraform apply at the same time, he’ll receive an error that the state is locked. He must wait until Alice's process completes and the lock is released.
    3. Once Alice’s changes are applied, the lock is removed, and Bob can then safely make his own updates.
This process prevents both Alice and Bob from applying conflicting infrastructure changes at the same time, reducing the risk of errors and resource misconfiguration.


Input Variable:
input variables are used to pass certain values from outside of the configuration or module. 
They are used to assign dynamic values to resource attributes. The difference between local and 
input variables is that input variables allow you to pass values before the code execution.

Output variable:
 Input Variables serve as parameters for a Terraform module, so users can customize behavior 
 without editing the source. Output Values are like return values for a Terraform module.

Consul in HashiCorp:
Consul is a distributed, highly available, and data center aware solution to connect and configure 
applications across dynamic, distributed infrastructure
Consul automates service discovery by replacing service connections usually handled with 
load balancers with an identity-based service catalog. The service catalog is a centralized 
source of truth that you can query through Consul's DNS server or API.


Terragrunt:
Terragrunt is a thin wrapper for Terraform that provides extra tools for keeping your Terraform 
configurations DRY (Don't Repeat Yourself). With Terragrunt, you can easily manage remote states 
and multiple environments. It also helps you keep your codebase clean and organized.
Terraform is designed to build and configure infrastructure, while Terragrunt is a thin wrapper 
that is built on top of Terraform. Terraform is created to operate at the resource level, while 
Terragrunt is designed to handle complex infrastructure deployments, which is typically 
composed of multiple Terraform modules.


Workspace:
Workspaces let you quickly switch between multiple instances of a single configuration within its 
single backend. They are not designed to solve all problems. When using Terraform to manage larger 
systems, you should create separate Terraform configurations that correspond to architectural 
boundaries within the system.

File system approach:
file system approach is good for provisioning because the whole infrastructure is more visible to the 
the developer and the downside is that there is a lot repetition.


difference between .tf and .tfvars:
These two files are similar but are not the same. Syntactically speaking, the variables.tf file is 
used to define the variable's type and optionally set a default value. A terraform. tfvars file 
is used to set the actual values of the variables.

